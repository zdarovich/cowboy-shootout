// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cowboy.proto

package cowboy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CowboyClient is the client API for Cowboy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CowboyClient interface {
	HandleShoot(ctx context.Context, in *ShootRequest, opts ...grpc.CallOption) (*ShootResponse, error)
}

type cowboyClient struct {
	cc grpc.ClientConnInterface
}

func NewCowboyClient(cc grpc.ClientConnInterface) CowboyClient {
	return &cowboyClient{cc}
}

func (c *cowboyClient) HandleShoot(ctx context.Context, in *ShootRequest, opts ...grpc.CallOption) (*ShootResponse, error) {
	out := new(ShootResponse)
	err := c.cc.Invoke(ctx, "/log.Cowboy/HandleShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CowboyServer is the server API for Cowboy service.
// All implementations must embed UnimplementedCowboyServer
// for forward compatibility
type CowboyServer interface {
	HandleShoot(context.Context, *ShootRequest) (*ShootResponse, error)
	mustEmbedUnimplementedCowboyServer()
}

// UnimplementedCowboyServer must be embedded to have forward compatible implementations.
type UnimplementedCowboyServer struct {
}

func (UnimplementedCowboyServer) HandleShoot(context.Context, *ShootRequest) (*ShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleShoot not implemented")
}
func (UnimplementedCowboyServer) mustEmbedUnimplementedCowboyServer() {}

// UnsafeCowboyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CowboyServer will
// result in compilation errors.
type UnsafeCowboyServer interface {
	mustEmbedUnimplementedCowboyServer()
}

func RegisterCowboyServer(s grpc.ServiceRegistrar, srv CowboyServer) {
	s.RegisterService(&Cowboy_ServiceDesc, srv)
}

func _Cowboy_HandleShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CowboyServer).HandleShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.Cowboy/HandleShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CowboyServer).HandleShoot(ctx, req.(*ShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cowboy_ServiceDesc is the grpc.ServiceDesc for Cowboy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cowboy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.Cowboy",
	HandlerType: (*CowboyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleShoot",
			Handler:    _Cowboy_HandleShoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cowboy.proto",
}
